
package cn.ijingxi.common.orm;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.*;

import cn.ijingxi.common.orm.ORM.KeyType;
import cn.ijingxi.common.util.IjxEnum;
import cn.ijingxi.common.util.LRU;
import cn.ijingxi.common.util.jxBTree;
import cn.ijingxi.common.util.jxCompare;
import cn.ijingxi.common.util.utils;


public class jxORMobj
{
	private static jxBTree<String,ORMClassAttr> ClassAttrTree=new jxBTree<String,ORMClassAttr>();

	private ORMClassAttr myClassAttr=null;
	private ArrayList<String> PrimaryKeys=null;
	private Queue<Object> params=null;
	
	private static LRU myLRU=new LRU();
	
	//加密处理，加密解密是发生在从数据库中读出与写入之时
	static String Encrypt(String str)
	{
		return str;
	}
	static Object EncryptField(FieldAttr fa,Object value)
	{
		if(value!=null&&fa.Encrypted&&value instanceof String)
			return Encrypt((String) value);
		return value;
	}
	static Object Encrypte(String className, String colName, Object value)
	{
		FieldAttr fa=getFieldAttr(className,colName);
		return EncryptField(fa,value);
	}
	static String DeEncrypt(String str)
	{
		return str;
	}
	static Object DeEncryptField(FieldAttr fa,Object value)
	{
		if(value!=null&&fa.Encrypted&&value instanceof String)
			return DeEncrypt((String) value);
		return value;
	}
	static Object DEEncrypte(String className, String colName, Object value)
	{
		FieldAttr fa=getFieldAttr(className,colName);
		return DeEncryptField(fa,value);
	}

	public ORMID getORMID() throws Exception
	{
		if(PrimaryKeys!=null&&PrimaryKeys.size()==1&&PrimaryKeys.get(0)=="ID")
			return new ORMID(myClassAttr.ClsName,(Integer) utils.getFiledValue(this, "ID"));
		return null;
	}
	
	public static void InitClass(Class<?> cls) throws Exception
	{
		Field[] fs = cls.getDeclaredFields();
		if(fs==null||fs.length==0)return;
		String classname=utils.GetClassName(cls);
		ORMClassAttr attr=new ORMClassAttr();
		ClassAttrTree.Insert(classname, attr);
		attr.ClsName=classname;
		attr.clsType=cls;		
		for(Field f:fs)
		{
			String fn=f.getName();
			ORM ann = f.getAnnotation(ORM.class);
			if(ann!=null)
			{
				attr.DBTableName=Encrypt(classname);
				FieldAttr fa=new FieldAttr();
				fa.FieldType=f.getType();
				if(utils.JudgeIsEnum(fa.FieldType))
					fa.Enumer=(IjxEnum) fa.FieldType.newInstance();
				attr.Fields.put(fn, fa);
				fa.Encrypted=ann.Encrypted();
				if(ann.keyType()==KeyType.AutoGenerated)
				{
					fa.IsDBGenerateKey=true;
					fa.IsPrimaryKey=true;
					attr.DBGenerateKey=fn;
					if(attr.PrimaryKeys==null)
						attr.PrimaryKeys=new ArrayList<String>();
					attr.PrimaryKeys.add(attr.PrimaryKeys.size()+1, fn);
				}
				else if(ann.keyType()==KeyType.PrimaryKey)
				{
					fa.IsPrimaryKey=true;
					if(attr.PrimaryKeys==null)
						attr.PrimaryKeys=new ArrayList<String>();
					attr.PrimaryKeys.add(attr.PrimaryKeys.size()+1, fn);
				}
				if(ann.Index()>0)
				{
					if(attr.Indexs==null)
						attr.Indexs=new ArrayList<ArrayList<String>>();
					ArrayList<String> iarr=attr.Indexs.get(ann.Index());
					if(iarr==null)
					{
						iarr=new ArrayList<String>();
						attr.Indexs.add(ann.Index(), iarr);
					}
					iarr.add(iarr.size()+1, fn);
				}
			}			
		}
		ORMClassAttr psa=getClassAttr(cls.getSuperclass());
		if(psa!=null)
			attr.SuperClassName=psa.ClsName;
	}
	public static jxORMobj New(Class<?> cls) throws Exception
	{
		ORMClassAttr attr=getClassAttr(utils.GetClassName(cls));
		if(attr==null)return null;
		jxORMobj obj=(jxORMobj) cls.newInstance();
		obj.myClassAttr=attr;
		obj.PrimaryKeys=attr.PrimaryKeys;
		return obj;
	}
	
	protected static void CreateTableInDB(Class<?> cls) throws Exception
	{
		ORMClassAttr attr=getClassAttr(cls);
		if(attr==null||attr.DBTableName==null)return;
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
		String cl=null;
		for(String fn:attr.Fields.keySet())
		{
			FieldAttr fa = attr.Fields.get(fn);
			cl=utils.StringAdd(cl, ",", db.TransDataTypeFromJavaToDB(fa.FieldType));
			if(fa.IsPrimaryKey&&attr.PrimaryKeys.size()==1)
			{
				cl+=" PRIMARY KEY";
				if(fa.IsDBGenerateKey)
					cl+=" "+db.GetDBGeneratedSQL();
			}
		}
		if(attr.PrimaryKeys.size()>1)
		{
			String ksl=null;
			for(String ks:attr.PrimaryKeys)
				ksl=utils.StringAdd(ksl, ",", ks);
			cl+=",PRIMARY KEY("+ksl+")";			
		}
		String sql="CREATE TABLE "+attr.DBTableName+"("+cl+")";
		Exec(conn,sql,null);  	
		if(attr.Indexs!=null)
		{
			int num=0;
			for(ArrayList<String> iarr:attr.Indexs)
			{
				num++;
				String il=null;
				for(String index:iarr)
					il=utils.StringAdd(il, ",", index);
				sql="CREATE INDEX index_"+num+" ON "+attr.DBTableName+" ("+il+")";		
				Exec(conn,sql,null);  		
			}
		}
		db.ReleaseConnection(conn);		
	}
	
	
	//读写删插
	String GetWherePrimaryKey(DB db,Connection conn) throws Exception
	{
		if(PrimaryKeys==null)return null;
		if(params==null)
			params=new LinkedList<Object>();
		String w=null;
		for(String s:PrimaryKeys)
		{
			w=utils.StringAdd(w, " And ", s+"=?");
			params.offer(db.TransValueFromJavaToDB(jxORMobj.Encrypte(myClassAttr.ClsName, s, TransEnumToDB(this, s))));			
		}
		return w;
	}
	public static Queue<jxORMobj> Select(Class<?> cls,SelectSql s) throws Exception
	{
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
		Queue<jxORMobj> rs=Select(db,conn,cls,s);
		db.ReleaseConnection(conn);
		return rs;
	}
	public static Queue<jxORMobj> Select(DB db,Connection conn,Class<?> cls,SelectSql s) throws Exception
	{
		Queue<jxORMobj> rs=new LinkedList<jxORMobj>();
		String clsName=utils.GetClassName(cls);
		String sql = s.GetSql(clsName);
		PreparedStatement stmt = conn.prepareStatement(sql);
		for(int i=0;i<s.params.size();i++)
			stmt.setObject(i, s.params.poll());
		ResultSet result=stmt.executeQuery();
		ResultSetMetaData rsMetaData = result.getMetaData();
	    int numberOfColumns = rsMetaData.getColumnCount();
		while(result.next())
		{
			jxORMobj obj=New(cls);
			for(int i=1;i<=numberOfColumns;i++)
			{
				Object v =result.getObject(i);
				String cn=rsMetaData.getColumnName(i);
				FieldAttr fa = getFieldAttr(clsName,cn);
				TransDBToEnum(obj, cn, DeEncryptField(fa,db.TransValueFromDBToJava(cls, v)));
			}
			rs.offer(obj);
		}
		return rs;
	}
	public static jxORMobj Get(Class<?> cls,SelectSql s) throws Exception
	{
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
		Queue<jxORMobj> rs=Select(db,conn,cls,s);
		db.ReleaseConnection(conn);
		return rs.poll();
	}
	public static jxORMobj GetByID(Class<?> cls,int ID) throws Exception
	{
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
		jxORMobj obj=GetByID(db,conn,cls,ID);
		db.ReleaseConnection(conn);		
		return obj;
	}
	public static jxORMobj GetByID(String clsName,int ID) throws Exception
	{
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
		ORMClassAttr attr = getClassAttr(clsName);
		SelectSql s=new SelectSql();
		s.AddTable(attr.ClsName);
		s.AddContion(attr.ClsName, attr.PrimaryKeys.get(0), jxCompare.Equal, ID);
		Queue<jxORMobj> rs=Select(db,conn,attr.clsType,s);
		db.ReleaseConnection(conn);		
		return rs.poll();
	}
	public static jxORMobj GetByID(DB db,Connection conn,Class<?> cls,int ID) throws Exception
	{
		ORMClassAttr attr = getClassAttr(cls);
		SelectSql s=new SelectSql();
		s.AddTable(attr.ClsName);
		s.AddContion(attr.ClsName, attr.PrimaryKeys.get(0), jxCompare.Equal, ID);
		Queue<jxORMobj> rs=Select(db,conn,cls,s);
		return rs.poll();
	}
	
	protected jxORMobj()
	{
		myInit();
	}
	//自动初始化
	protected void myInit()
	{
		
	}
	//数据校验
	protected void Verify() throws Exception
	{	
	}
	public void Update() throws Exception
	{
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
        synchronized (this)
        {		
        	Update(db,conn);
        }
		db.ReleaseConnection(conn);		
	}
	public void Update(DB db,Connection conn) throws Exception
	{
		Verify();
		ORMClassAttr attr=myClassAttr;
		while(attr!=null)
		{
			if(attr.DBTableName!=null)
				Update(db,conn,attr);
			if(attr.SuperClassName!=null)
				attr=getClassAttr(attr.SuperClassName);
			else
				break;
		}		
	}
	private void Update(DB db,Connection conn,ORMClassAttr attr) throws Exception
	{
		if(params==null)
			params=new LinkedList<Object>();
		String sql="Update "+attr.DBTableName+" Set ";
		String v=null;
		for(String fn:attr.Fields.keySet())
		{
			v=utils.StringAdd(v, ",", fn+"=?");
			params.offer(db.TransValueFromJavaToDB(jxORMobj.Encrypte(attr.ClsName, fn, TransEnumToDB(this, fn))));
		}
		sql+=v+" Where "+GetWherePrimaryKey(db,conn);
		Exec(conn,sql,params);
	}
	public void Delete() throws Exception
	{
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
        synchronized (this)
        {		
        	Delete(db,conn);
        	myLRU.delete(getORMID());        	
        }
		db.ReleaseConnection(conn);		
	}
	public void Delete(DB db,Connection conn) throws Exception
	{
		ORMClassAttr attr=myClassAttr;
		while(attr!=null)
		{
			if(attr.DBTableName!=null)
				Delete(db,conn,attr);
			if(attr.SuperClassName!=null)
				attr=getClassAttr(attr.SuperClassName);
			else
				break;
		}		
	}
	private void Delete(DB db,Connection conn,ORMClassAttr attr) throws Exception
	{
		String sql="Delete From "+attr.DBTableName+" Where "+GetWherePrimaryKey(db,conn);
		Exec(conn,sql,params);
	}
	public Integer Insert() throws Exception
	{
		int id=0;
		DB db=JdbcUtils.GetDB();
		Connection conn = db.GetConnection();
        synchronized (this)
        {		
        	id=Insert(db,conn);
        	myLRU.delete(getORMID());        	
        }
		db.ReleaseConnection(conn);		
		return id;
	}
	public Integer Insert(DB db,Connection conn) throws Exception
	{
		Verify();
		Stack<ORMClassAttr> al=new Stack<ORMClassAttr>();
		ORMClassAttr attr=myClassAttr;
		while(attr!=null)
		{
			al.push(attr);
			if(attr.SuperClassName!=null)
				attr=getClassAttr(attr.SuperClassName);
			else
				break;
		}
		Integer id=0,tid=0;
		try {
			attr=al.pop();
		} catch (Exception e) {
			attr=null;
		}
		while(attr!=null)
		{
			tid=Insert(db,conn,attr);
			if(tid!=0)
				id=tid;
			try {
				attr=al.pop();
			} catch (Exception e) {
				attr=null;
			}
		}
		return id;
	}
	private Integer Insert(DB db,Connection conn,ORMClassAttr attr) throws Exception
	{
		String cl=null,vl=null;
		for(String s:attr.Fields.keySet())
		{
			cl=utils.StringAdd(cl, ",", s);
			vl=utils.StringAdd(vl, ",", "?");
			params.offer(db.TransValueFromJavaToDB(jxORMobj.Encrypte(attr.ClsName, s, TransEnumToDB(this, s))));
		}
		String sql="Insert Into "+attr.DBTableName+"("+cl+") Values ("+vl+")";
		Exec(conn,sql,params);
		if(attr.DBGenerateKey!=null)
			return db.GetGeneratedKey(conn, attr.DBGenerateKey);
		return 0;
	}
	
	public static boolean Exec(Connection conn,String sql,Queue<Object> param) throws Exception
	{
		PreparedStatement ps = conn.prepareStatement(sql);
		if(param!=null)
			for(int i=0;i<param.size();i++)
				ps.setObject(i, param.poll());
		return ps.execute();
	}
	
	
	
	//扩展属性的处理
	protected String getExtendValue(String FieldName,String Purpose) throws Exception
	{
		jxJson js=null;
		String spv=(String) utils.getFiledValue(this, FieldName);
		if(spv!=null)
			js=jxJson.JsonToObject(spv);
		else
			js=jxJson.GetObjectNode(FieldName);
		jxJson sub=js.GetSubObject(Purpose);
		if(sub!=null)
			return (String) sub.getValue();
		return null;
	}
	protected void setExtendValue(String FieldName,String Purpose,Object value) throws Exception
	{
		jxJson js=null;
		String spv=(String) utils.getFiledValue(this, FieldName);
		if(spv!=null)
			js=jxJson.JsonToObject(spv);
		else
			js=jxJson.GetObjectNode(FieldName);
		jxJson sub=js.GetSubObject(Purpose);
		if(sub!=null)
			sub.setValue(value);
		else
			js.AddValue(Purpose, value);
		utils.setFiledValue(this, FieldName,js.TransToString());
	}

	//获取通用信息
	static FieldAttr getFieldAttr(String ClassName,String FieldName)
	{
		ORMClassAttr attr=getClassAttr(ClassName);
		if(attr!=null)
			return attr.Fields.get(FieldName);
		return null;
	}
	static String GetClassName(String ClassName,String ColName)
	{
		ORMClassAttr attr=getClassAttr(ClassName),p=null;
		while(attr!=null)
		{
			FieldAttr f=attr.Fields.get(ColName);
			if(f!=null)
				p=attr;
			attr=getClassAttr(attr.SuperClassName);
		}
		if(p!=null)
			return p.ClsName;
		return null;
	}
	static ORMClassAttr getClassAttr(String ClassName)
	{
		return ClassAttrTree.Search(ClassName);
	}
	static ORMClassAttr getClassAttr(Class<?> cls)
	{
		return ClassAttrTree.Search(utils.GetClassName(cls));
	}
	static ORMClassAttr getSuperClassAttr(String ClassName)
	{
		ORMClassAttr attr = ClassAttrTree.Search(ClassName);
		if(attr!=null&&attr.SuperClassName!=null)
			return ClassAttrTree.Search(attr.SuperClassName);
		return null;
	}
	//如果FieldName是枚举则转换为int
	static Object TransEnumToDB(jxORMobj obj,String FieldName) throws Exception
	{
		Object value=utils.getFiledValue(obj, FieldName);
		FieldAttr fa=getFieldAttr(obj.myClassAttr.ClsName,FieldName);
		if(fa!=null&&utils.JudgeIsEnum(fa.FieldType))
			return ((Enum<?>)value).ordinal();
		return value;
	}
	//如果FieldName是枚举则将int转换为枚举
	static void TransDBToEnum(jxORMobj obj,String FieldName,Object value) throws Exception
	{
		Object v=value;
		FieldAttr fa=getFieldAttr(obj.myClassAttr.ClsName,FieldName);
		if(fa!=null&&utils.JudgeIsEnum(fa.FieldType))
			v=fa.Enumer.TransToORMEnum((Integer) value);
		utils.setFiledValue(obj, FieldName, v);
	}
	
}

class FieldAttr
{
	Class<?> FieldType=null;
	IjxEnum Enumer=null;
	boolean  Encrypted=false;
	boolean IsPrimaryKey=false;
	boolean IsDBGenerateKey=false;
}
class ORMClassAttr
{
	String ClsName=null;
	Class<?> clsType=null;
	String DBTableName=null;
	String SuperClassName=null;
	String DBGenerateKey=null;
	ArrayList<String> PrimaryKeys=null;
	ArrayList<ArrayList<String>> Indexs=null;
	Map<String,FieldAttr> Fields=new HashMap<String,FieldAttr>();
	
	
}