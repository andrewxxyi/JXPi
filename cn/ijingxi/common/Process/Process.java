
package cn.ijingxi.common.Process;

import java.util.Date;
import java.util.regex.Pattern;

import cn.ijingxi.common.orm.*;
import cn.ijingxi.common.orm.ORM.KeyType;
import cn.ijingxi.common.util.*;

/**
 * 流程的数据存储，其实就是流程的模板
 * @author andrew
 *
 */
public class Process extends jxORMobj
{	
	public static void Init() throws Exception{	InitClass(Process.class);}
	public static void CreateDB() throws Exception
	{
		CreateTableInDB(Process.class);
	}
	
	@ORM(keyType=KeyType.AutoGenerated)
	public int ID;

	@ORM(Index=1)
	public String Name;
	
	@ORM(Descr="版本号，用于同名进程模板之间的区分")
	public String Version; 
	static Pattern PatternVersion = Pattern.compile("^[1-9]\\d+\\.\\d+\\.\\d+\\.\\d+$");

	@ORM(Index=2)
	public Date CreateTime;
		
	@ORM(Descr="json格式的所有节点名")
	public String Nodes;		

	@ORM(Descr="json格式的所有流转")
	public String Trans;		
	
	@ORM(Descr="json格式的各节点执行者")
	public String Execer;		

	@ORM(Descr="用于显示本流程的处理页面，这样当新的流程处理方法出来后原流程可不受影响")
	public String DispURL;		
	
	@ORM
	public Boolean NoUsed;
	

    //key1是From节点名，key2是出口名，值是To节点名
	jxLink<String,jxLink<String,String>> OutBranch=new jxLink<String,jxLink<String,String>>();
	//节点出口顺序：key1是From节点名，key2是出口顺序，值是To出口名
	jxLink<String,jxLink<Integer,String>> OutBranchOrder=new jxLink<String,jxLink<Integer,String>>();

	//key1是From节点名，key2是From节点名，值是出口名
	jxLink<String,jxLink<String,String>> InBranch=new jxLink<String,jxLink<String,String>>();

    //各节点的执行者
    jxLink<String,IExecutor> Execers=new jxLink<String,IExecutor>();
	
	
	
	@Override
	protected void Verify() throws Exception
	{
		if(Version!=null&&!PatternVersion.matcher(Version).matches())
			throw new Exception("版本号的格式应为：vvv.vvv.vvv.vvv");		
	}
	
	@Override
	protected void myInit()
	{
		if(Execer!=null)
		{		
			jxJson j=jxJson.JsonToObject(Execer);
			if(j!=null)
			{
				try
				{
					for(jxJson js:j.SubEl())
					{
						String n=(String)js.GetSubValue("NodeName");
						String tn=(String)js.GetSubValue("Type");
						Integer id= Integer.parseInt((String)js.GetSubValue("ID"));
						IExecutor e=(IExecutor)jxORMobj.GetByID(tn, id);
						Execers.addByRise(n, e);
					}
				}
				catch(Exception e)
				{
					  e.printStackTrace();
				}
			}
		}
		if(Trans!=null)
		{
			jxJson j=jxJson.JsonToObject(Trans);
			if(j!=null)
			{
				try
				{
					for(jxJson jn:j.SubEl())
					{
						//和jxProcess中的getTransJSON对应
						String n=(String)jn.GetSubValue("Name");
						Integer order=(Integer)Integer.parseInt((String)jn.GetSubValue("Order"));
						String fn=(String)jn.GetSubValue("From");
						String tn=(String)jn.GetSubValue("To");
						jxLink<String,String> ov=OutBranch.search(fn);
						if(ov==null)
						{
							ov=new jxLink<String,String>();
							OutBranch.addByRise(fn, ov);
						}
						ov.addByRise(n, tn);
						jxLink<Integer,String> oo=OutBranchOrder.search(fn);
						if(oo==null)
						{
							oo=new jxLink<Integer,String>();
							OutBranchOrder.addByRise(fn, oo);
						}
						oo.addByRise(order, n);
						
						jxLink<String,String> iv=InBranch.search(tn);
						if(iv==null)
						{
							ov=new jxLink<String,String>();
							InBranch.addByRise(fn, ov);
						}
						iv.addByRise(fn, n);
					}
				}
				catch(Exception e)
				{
					  e.printStackTrace();
				}
			}
		}
	}
	
	//发起新流程时调用
	public ProcessInstance NewInstance(IExecutor Caller, String Desc) throws Exception
	{
		ProcessInstance p=new ProcessInstance();
		p.CteaterID=Caller.GetID();
		p.CreateTime=new Date();
		p.Name=String.format("流程（%s）启动：%s",Name,Desc);
		ResetInstance(p);
		p.Start(Caller, Desc);
		return p;
	}

	//从数据库中读取时使用
	void ResetInstance(ProcessInstance p) throws Exception
	{
		p.process=this;		
		p.ProcessID=ID;
		jxJson j=jxJson.JsonToObject(Nodes);
		if(j!=null)
		{
			for(LinkNode<String, jxJson> jn:j.SubObjects())
			{
				String name=jn.getKey();
				jxJson js=jn.getValue();
				ProcessNode node=new ProcessNode(p,name,js);
				IExecutor e=Execers.search(name);
				node.setExecer(e);
				p.AllNode.Insert(name, node);
			}				
		}
	}

	private jxJson Execer_json=null;
	public void SetExecer(String NodeName,String Type,Integer ID) throws Exception
	{
		if(Execer_json==null)
			Execer_json=jxJson.GetObjectNode("Nodes");
		jxJson j=jxJson.GetObjectNode(NodeName);
		Execer_json.AddSubObjNode(j);
		j.AddValue("NodeName", NodeName);
		j.AddValue("Type", Type);
		j.AddValue("ID", ID);
		Execer=Execer_json.TransToString();
	}
	private jxJson Nodes_json=null;
	public void AddNode(String NodeName) throws Exception
	{
		AddNode(NodeName,false,false,false);
	}
	public void AddNode(String NodeName,boolean InputTypeIsAnd,boolean OutputTypeIsAnd,boolean Auto) throws Exception
	{
		if(Nodes_json==null)
			Nodes_json=jxJson.GetObjectNode("Nodes");
		jxJson j=jxJson.GetObjectNode(NodeName);
		Nodes_json.AddSubObjNode(j);
		j.AddValue("state", InstanceState.Waiting.name());
		j.AddValue("Auto", Auto);
		j.AddValue("InputType", InputTypeIsAnd);
		j.AddValue("OutputType", OutputTypeIsAnd);
		Nodes=Nodes_json.TransToString();
	}
	private jxJson Trans_json=null;
	public void AddTrans(String TransName,String From,String To) throws Exception
	{
		jxLink<Integer,String> oo=OutBranchOrder.search(From);
		if(oo==null)
		{
			oo=new jxLink<Integer,String>();
			OutBranchOrder.addByRise(From, oo);
		}
		Integer order=oo.getCount()+1;
		oo.addByRise(order, TransName);
		if(Trans_json==null)
			Trans_json=jxJson.GetArrayNode("Trans");
		jxJson j=jxJson.GetObjectNode("t");
		Trans_json.AddArrayElement(j);
		j.AddValue("Name", TransName);
		j.AddValue("Order", order);
		j.AddValue("From", From);
		j.AddValue("To", To);		
		Trans=Trans_json.TransToString();
		
	}

	/**
	 * 将进程初始化为G5流程，这个只需要在创建流程时用一次就可以了，不必每次都初始化
	 * @throws Exception
	 */
    public void G5_Init() throws Exception
    {
    	AddNode(ProcessNode.Node_Start,false,false,true);
    	AddNode(ProcessNode.Node_End,false,false,true);
    	AddNode(ProcessNode.Node_Accept,false,false,true);
    	AddNode(ProcessNode.Node_Reject,false,false,true);
    	
    	AddNode("申请",false,false,false);
    	AddNode("第一级审核",false,false,false);
    	AddNode("第一级已同意",false,false,true);
    	AddNode("第二级审核",false,false,false);
    	AddNode("第二级已同意",false,false,true);
    	AddNode("第三级审核",false,false,false);
    	AddNode("第三级已同意",false,false,true);
    	AddNode("第四级审核",false,false,false);
    	AddNode("第四级已同意",false,false,true);
    	AddNode("第五级审核",false,false,false);

    	AddTrans("自动",ProcessNode.Node_Start,"申请");
    	AddTrans("申请","申请","第一级审核");
    	AddTrans("拒绝","第一级审核",ProcessNode.Node_Reject);
    	AddTrans("同意","第一级审核","第一级已同意");
    	AddTrans("后继节点有人执行","第一级已同意","第二级审核");
    	AddTrans("后继节点无人执行","第一级已同意",ProcessNode.Node_Accept);
    	AddTrans("拒绝","第二级审核",ProcessNode.Node_Reject);
    	AddTrans("同意","第二级审核","第二级已同意");
    	AddTrans("后继节点有人执行","第二级已同意","第三级审核");
    	AddTrans("后继节点无人执行","第二级已同意",ProcessNode.Node_Accept);
    	AddTrans("拒绝","第三级审核",ProcessNode.Node_Reject);
    	AddTrans("同意","第三级审核","第三级已同意");
    	AddTrans("后继节点有人执行","第三级已同意","第四级审核");
    	AddTrans("后继节点无人执行","第三级已同意",ProcessNode.Node_Accept);
    	AddTrans("拒绝","第四级审核",ProcessNode.Node_Reject);
    	AddTrans("同意","第四级审核","第四级已同意");
    	AddTrans("后继节点有人执行","第四级已同意","第五级审核");
    	AddTrans("后继节点无人执行","第四级已同意",ProcessNode.Node_Accept);
    	AddTrans("拒绝","第五级审核",ProcessNode.Node_Reject);
    	AddTrans("同意","第五级审核",ProcessNode.Node_Accept);
    	
    	AddTrans("自动",ProcessNode.Node_Reject,ProcessNode.Node_End);
    	AddTrans("自动",ProcessNode.Node_Accept,ProcessNode.Node_End);    	
    }
    

}